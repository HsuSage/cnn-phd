dta <- loadMNISTFiles "../MNIST-Data/t10k-labels-idx1-ubyte" "../MNIST-Data/t10k-images-idx3-ubyte"
let outputSize = 4
let nnSize = 16
let inputSize = 784
let llSize = 3
let epochs = 3
let trainingSet = 800
let testingSet = 200
-- let genStd = mkStdGen inputSize
genStd <- newStdGen
let transformV = R.fromUnboxed (R.ix1 inputSize) . V.map (\z -> bool False True (z >= 50))
let transformNum = R.fromListUnboxed (R.ix1 outputSize) . reverse . num2Bin' outputSize
let trainSet = map (\(x,y) -> TrainElem (transformV y) (transformNum x)) $ take trainingSet dta
let testSet = map (\(x,y) -> TrainElem (transformV y) (transformNum x)) . take nnSize $ drop testingSet dta
let (seed0, genStd0) = next genStd
let (seed1, genStd1) = next genStd0
let (seed2, genStd2) = next genStd1
let camN0 = createRNeuron nnSize inputSize seed0
let camN1 = createRNeuron nnSize nnSize seed1
let camN2 = createRNeuron outputSize nnSize seed2
let nn = [camN0] ++ replicate llSize camN1 ++ [camN2]
-- nn' <- trainUntilLearned nn trainSet 0 5
nn' <- trainWithEpochs nn trainSet 0 epochs
let distance = sum $ distanceCAMNN nn' testSet