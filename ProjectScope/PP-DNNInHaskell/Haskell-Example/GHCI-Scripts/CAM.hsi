nSize = 3

canN0 = createZNeuron 3 3
canN1 = createZNeuron 2 3
canN2 = createZNeuron 3 2

-- nn = replicate 5 canN0
nn = [canN0, canN1, canN2]

baseLst = [0, 2, 4, 6, 1, 3, 5, 7]
baseOLst = [0, 6, 7, 3, 2, 4, 2, 1]
hiddenLst = P.map (reverse . num2Bin' 2) [0]

inputLst = P.map (reverse . num2Bin' nSize) baseLst
outputLst = P.map (reverse . num2Bin' nSize) baseOLst
inputs = P.map (fromListUnboxed (ix1 nSize)) inputLst
outputs = P.map (fromListUnboxed (ix1 nSize)) outputLst
hidden = P.map (fromListUnboxed (ix1 2)) hiddenLst
trainSet = P.zipWith (\x y -> TrainElem x y) inputs outputs

updates = updatesWithConditions (length nn) (length trainSet) 0

-- trainUntilLearned nn trainSet 0 7
nn' <- trainUntilLearned nn trainSet 0 5



queryCANNN nn' trainSet
distanceCANNN nn' trainSet



--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---
