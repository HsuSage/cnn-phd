nSize = 8
testSize = 10
nnSize = 6

camW0 = fromListUnboxed (ix2 nSize nSize) $ replicate (nSize * nSize) False
camT0 = fromListUnboxed (ix1 nSize) $ replicate nSize nSize :: NTTVU
camN0 = CAMNeuron (CAMWElem camW0 0) (CAMTElem camT0 0)

baseLst = [1 .. testSize]
baseOLst = P.map sin [1 .. testSize]
inputsLst = P.map (num2Bin' nSize) baseLst
outputLst = P.map (num2Bin' nSize . round . (* 100)) baseOLst
inputs = P.map (fromListUnboxed (ix1 nSize)) inputsLst
outputs = P.map (fromListUnboxed (ix1 nSize)) outputLst

trainSet = P.zipWith (\x y -> TrainElem x y) inputs outputs

nn = replicate nnSize camN0
updates = take (length trainSet) $ constructUpdate' (length nn)

trainUntilLearned' nn trainSet 0 3
