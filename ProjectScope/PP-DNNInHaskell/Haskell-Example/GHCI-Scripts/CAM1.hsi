gen = mkStdGen 5

nn' = foldr (\(x, y) w -> trainCAMNN x y w) nn ioputs

index = 0
camU = CAMUpdate CAMWeigth 0 0

trainCAMNN (input2, output2) 0 camU nn



(g', nn') = trainCAMNNIO (gen, nn) ioputs
(g'', nn'') = trainCAMNNIO (g', nn') ioputs
(g''', nn''') = trainCAMNNIO (g'', nn'') ioputs

applyNeurons neurons input = foldl (\x y -> applyNeuron x y) input neurons
Prelude.map (applyNeurons nn') inputs
Prelude.map (applyNeurons nn'') inputs
Prelude.map (applyNeurons nn''') inputs

--------------------------------

train = input1
desired = output1

query = foldl applyNeuron train nn
lstIndex = 1

deltaWeights' camW0 sel0 sel0 output2
deltaThreshold' camT0 sel0 output0

updateCAMNeuron' camN0 CAMThreshold sel0 output0 output0
updateCAMNeuron' camN0 CAMWeight sel0 input0 input0

applyBackProp output1 input0 input0 camN2

trainNeurons' (trainSet !! 1) (updates !! 1) nn
trainCAMNN' nn updates trainSet
queryCAMNN nn trainSet

--------------------------------

randomInts = take 100 $ randomRs (-100,100) gen
genElem = Prelude.map (\x ->  mkStdGen x) randomInts
Prelude.map (\x -> randomUpdate x nn) genElem

--------------------------------

let ((row, col), (indexW, weightLst), deltaLst, (indexE, expectedLst)) = testExamples2 !! 2
let delta = createWeight row col deltaLst
let lastWChange = indexW
let oredDelta = foldS (.|.) False $ R.transpose delta
oredDelta
let numElems = size . extent $ oredDelta
numElems
let onesComp = construct1Complement lastWChange numElems
onesComp
applySHY f g sh@(Z :. x :. y) = bool (-1) y $ f sh .&. g (ix1 y)
indexVec = computeUnboxedS $ traverse2 onesComp oredDelta const applySHY
indexVec
modifiedIndex = head . filter (>= 0) $ R.toList  indexVec
modifiedIndex
finalDelta = computeUnboxedS $ R.traverse delta id (\f sh@(Z :. x :. y) -> bool False (f sh) (y == modifiedIndex))
CAMWElem 0 finalDelta

delta = createWeight row col [1,0,0,1,0,1,0,0,1]
CAMWElem 0 delta


--------------------------------

applyReverseNeuron compared camN2

camW' = deltaWeights camW0 compared sel0

deltaThreshold camT0 sel0 query0



tr0 = computeS $ traverse2 camW2 query0 const (\f g sh@(Z :. x :. y) -> let nSh = ix1 y in xor (f sh) (g nSh)) :: NNTMU
tr1 = computeS $ traverse2 tr0 output1 const (\f g sh@(Z :. x :. y) -> let nSh = ix1 y in (f sh) ==  (complement $ g nSh)) :: NNTMU
tr2 = computeS $ traverse2 tr1 compared const (\f g sh@(Z :. x :. y) -> let nSh = ix1 y in (f sh) .&. (g nSh)) :: NNTMU


camW' = selectionMethod camW0 query0 query1 compared

camW' = selectionMethod output1 query camW

ll = layerColide camW query xor
layerColide ll output1 (==)

camN' = CAMNeuron camW' camT
nn' = [camN, camN']

query = foldl applyNeuron input1 nn'
compared = vecCompare query output1
hammingDistance compared

--------------------------------

camN = randomCAMNeuron gen 5 4
camW = camWeigths camN
camT = camThresholds camN
gen' = snd $ next gen
input = randomNNTVU gen' 5

camW0 = fromListUnboxed (ix2 2 2) [False, False, False, False]
camT0 = fromListUnboxed (ix1 2) [2,1]
camN0 = CAMNeuron camW0 camT0

camW1 = fromListUnboxed (ix2 2 2) [True, False, True, False]
camT1 = fromListUnboxed (ix1 2) [2,2]
camN1 = CAMNeuron camW1 camT1

input0 = fromListUnboxed (ix1 2) [False, False]
output0 = fromListUnboxed (ix1 2) [False, False]
input1 = fromListUnboxed (ix1 2) [False, True]
output1 = fromListUnboxed (ix1 2) [True, True]
input2 = fromListUnboxed (ix1 2) [True, False]
output2 = fromListUnboxed (ix1 2) [True, True]
input3 = fromListUnboxed (ix1 2) [True, True]
output3 = fromListUnboxed (ix1 2) [False, False]

inputs = [input0, input3, input1, input2]
outputs = [output0, output3, output1, output2]
ioputs = zip inputs outputs
nn = [camN0, camN1]

res0 = applyNeuron input2 camN0
res1 = applyNeuron res0 camN1
res1

applyNeurons neurons input = foldl (\x y -> applyNeuron x y) input neurons
Prelude.map (applyNeurons nn) inputs

--------------------------------

-- applyDeltaThresholdOne tSize index thresholdLst deltaLst expIndex expectedLst = result

-- (tSize, index, thresholdLst, deltaLst, expIndex, expectedLst, maxValue) = (3, 0, [1,2,3], [0,0,1], 2, [2,2,3], 3)
-- (tSize, index, thresholdLst, deltaLst, expIndex, expectedLst, maxValue) = (3, 0, [1,2,0], [0,0,-1], 2, [2,2,0], 3)
(tSize, index, thresholdLst, deltaLst, expIndex, expectedLst, maxValue) = (3, 0, [4,2,0], [1,0,-1], 0, [2,2,0], 2)

threshold = CAMTElem index $ createThreshold tSize 0 thresholdLst
delta = createThreshold tSize 0 deltaLst
expected = CAMTElem expIndex $ createThreshold tSize 0 expectedLst
applyDeltaThreshold threshold delta maxValue
result = expected == applyDeltaThreshold threshold delta maxValue

(tChange, camT) = (index, camTElem threshold)

changeIndexM = thresholdIndexChange tChange delta
changeIndex = fromJust changeIndexM
withinBound x y = let opr = x + y in bool 0 (bool maxValue opr (opr <= maxValue)) (opr >= 0)
applySHY pos f g sh@(Z :. x) = let update = withinBound (f sh) (g sh) in bool (f sh) update (x == pos)
updatedT pos = computeUnboxedS $ traverse2 camT delta const (applySHY pos)



--------------------------------

let numElems = 64
let threshold = 1
let trainingDInputR = take 100 $ randomRs (-0.5, 0.5) gen :: [Double]
let trainingDCorrectR = map sin trainingDInputR
let trainingBInput = map doubleToWord trainingDInputR
let trainingBCorrect = map doubleToWord trainingDCorrectR
let (_, gen') = next gen
let testDInput = take numElems $ randomRs (-0.5, 0.5) gen' :: [Double]
let testDCorrect = map sin testDInput
let testBInput = map doubleToWord testDInput
let testBCorrect = map doubleToWord testDCorrect

--------------------------------

let (_, gen) = next gen'
let weigths0 = take numElems $ randoms gen :: [Word64]
let weigths1 = take numElems $ randoms gen :: [Word64]
let weigths2 = take numElems $ randoms gen :: [Word64]

fstElem = trainingBInput !! 0
fstElemCorrect = trainingBCorrect !! 0

let fstCalc = sumBits $ map (xorPCThreshold fstElem threshold) weigths0
let sndCalc = sumBits $ map (xorPCThreshold fstCalc threshold) weigths1
let trdCalc = sumBits $ map (xorPCThreshold sndCalc threshold) weigths2

let deltaCalc = xor trdCalc fstElemCorrect

--------------------------------

-- nn = [camN1, camN2]
index = 0
elemIndex = 1
elemN = CAMThreshold
train = input2
desired = output2

trainCAMNN' (train, desired) (index, elemN, elemIndex) nn

--------------------------------------------
              
let (row, col) = (3, 3)
delta = createWeight row col [1,0,0,1,0,1,0,0,1]
expected = createWeight row col [1,0,0,1,0,0,0,0,0]
indexW = 4
indexE = 0
deltaNextChange delta indexW
(indexW, expected) == deltaNextChange delta indexW

lastWChange = indexW

oredDelta = foldS (.|.) False $ R.transpose delta
numElems = size . extent $ oredDelta
onesComp = construct1Complement lastWChange numElems
applySHY f g sh@(Z :. x :. y) = bool (-1) y $ f sh .&. g (ix1 y)
indexVec = computeUnboxedS $ traverse2 onesComp oredDelta const applySHY
modifiedIndex = safeHead . filter (>= 0) $ R.toList indexVec
      finalDelta = case modifiedIndex of
          Just index -> (index, computeUnboxedS $ R.traverse delta id (\f sh@(Z :. x :. y) -> bool False (f sh) (y == index)))
          Nothing    -> (lastWChange, delta)
          

-- -ff--f-f-f-f-f-f-f-f-f-f-f-f-f
let (row, col) = (3, 3)
delta = createWeight row col [1,0,0,1,0,1,0,0,1]
expected = createWeight row col [1,0,0,1,0,0,0,0,0]
indexW = -1
indexE = 0
deltaNextChange delta indexW
(indexW, expected) == deltaNextChange delta indexW

lastWChange = indexW

oredDelta = foldS (.|.) False $ R.transpose delta
changeIndexM = weightIndexChange lastWChange oredDelta
finalDelta = case changeIndexM of
    Just index -> (index, computeS $ traverse delta id (\f sh@(Z :. x :. y) -> bool False (f sh) (y == index)))
    Nothing    -> (-1, computeS $ map (const False) delta)



--------------------------------------------
--------------------------------------------

nSize = 2
camN0 = createZNeuron 2 2
nn = [camN0, camN0]
baseLst = [0, 1, 2, 3]
-- baseOLst = [0, 3, 3, 0] -- XOR output
baseOLst = [3, 0, 0, 3] -- XNOR output
inputLst = P.map (reverse . num2Bin' nSize) baseLst
outputLst = P.map (reverse . num2Bin' nSize) baseOLst
inputs = P.map (fromListUnboxed (ix1 nSize)) inputLst
outputs = P.map (fromListUnboxed (ix1 nSize)) outputLst
trainSet = P.zipWith (\x y -> TrainElem x y) inputs outputs
updates = updatesWithConditions (length nn) (length trainSet) 0
nn1 <- trainUntilLearned nn trainSet 0 0

distanceCAMNN nn1 trainSet
let nn2 = trainCAMNN nn updates trainSet

trainCAMNN nn updates trainSet
nn1 = trainNeurons (trainSet !! 1) (updates !! 1) nn
nn2 = trainNeurons (trainSet !! 2) (updates !! 2) nn1
nn3 = trainNeurons (trainSet !! 3) (updates !! 3) nn2

train = trainInput $ trainSet !! 2
desired = trainOutput $ trainSet !! 2
lIndex = lstIndex (updates !! 2)
cElem = camElem (updates !! 2)

(query, wAo) = queryNeuronsAcc nn1 train -- wAo = Weights and Outputs
query
wAo
compared = vecCompare query desired
compared
chosenNeuron = nn !! lIndex
chosenNeuron
wAoI = wAo !! lIndex
wAoI
deltaPos = take (length nn - lIndex - 1) $ reverse wAo
deltaPos
deltaP = calculateDelta deltaPos compared
deltaP
atLeastOne = hammingWeight deltaP
atLeastOne
camNN = updateCAMNeuron chosenNeuron cElem deltaP wAoI
camNN
nn' = bool nn1 (replaceElem nn1 lIndex camNN) $ atLeastOne > 0
nn'



tI = trainInput $ trainSet !! 2
h1 = applyNeuron tI (nn3 !! 0)
o1 = applyNeuron h1 (nn3 !! 1)

camW = camWeights (nn3 !! 1)
camT = camThresholds (nn3 !! 1)
-- camW = CAMWElem (fromListUnboxed (ix2 2 2) [True, False, True, False]) 0
collision = layerColide camW h1 xor
summ = layerSummation collision
res = layerOperation summ camT (>=)

--------------------------------------------
--------------------------------------------


--------------------------------



--------------------------------



--------------------------------

w2 = fromListUnboxed (ix2 3 2) [False, True, True, False, False, False]
h1 = fromListUnboxed (ix1 2) [True, False]
t2 = fromListUnboxed (ix1 3) [0,1,2]
cW2 = CAMWElem w2 0
cT2 = CAMTElem t2 0
col2 = layerColide cW2 h1 xor
sum2 = layerSummation col2
o0 = layerOperation sum2 cT2 (>=)

--------------------------------

llN = createWeight [1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0] 3 5
oredDelta = foldS (.|.) False $ R.transpose llN
onesComp = construct1Complement 2 . size . extent $ oredDelta
indexVec = foldS (.|.) False $ traverse2 onesComp oredDelta const (\f g sh@(Z :. x :. y) -> f sh .&. g (ix1 y))
modifiedIndex = indexFirstNonZero 0 $ R.toList indexVec
finalDelta = computeUnboxedS $ R.traverse llN id (\f sh@(Z :. x :. y) -> bool False (f sh) (y == modifiedIndex))

weights = createWeight [1, 0, 0, 1, 0, 0] 2 3
delta = createWeight [1, 0, 0, 0, 1, 1] 2 3
applyDeltaWeight (CAMWElem weights 0) delta
lastWChange = 0
deltaNextChange delta lastWChange

--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---

gen = mkStdGen 2

camW0 = fromListUnboxed (ix2 2 2) [False, False, False, False]
camT0 = fromListUnboxed (ix1 2) [2, 2] :: NTTVU
camN0 = CAMNeuron (CAMWElem camW0 0) (CAMTElem camT0 0)

camW1 = fromListUnboxed (ix2 2 2) [False, False, False, False]
camT1 = fromListUnboxed (ix1 2) [2,1] :: NTTVU
camN1 = CAMNeuron (CAMWElem camW1 0) (CAMTElem camT1 0)

camW2 = fromListUnboxed (ix2 2 2) [True, False, True, False]
camT2 = fromListUnboxed (ix1 2) [2,2] :: NTTVU
camN2 = CAMNeuron (CAMWElem camW2 0) (CAMTElem camT2 0)

sel0 = fromListUnboxed (ix1 2) [True, False]

input0 = fromListUnboxed (ix1 2) [False, False]
output0 = fromListUnboxed (ix1 2) [False, False]
input1 = fromListUnboxed (ix1 2) [False, True]
output1 = fromListUnboxed (ix1 2) [True, True]
input2 = fromListUnboxed (ix1 2) [True, False]
output2 = fromListUnboxed (ix1 2) [True, True]
input3 = fromListUnboxed (ix1 2) [True, True]
output3 = fromListUnboxed (ix1 2) [False, False]

inputs = [input0, input1, input2, input3]
outputs = [output0, output1, output2, output3]
trainSet = P.zipWith (\x y -> TrainElem x y) inputs outputs

nn = [camN0, camN0]
updatesLst = [(1, 0, CAMThreshold), (1, 0, CAMWeight), (0, 1, CAMThreshold), (0, 0, CAMWeight)]
updates = P.map (\(x, y, z) -> CAMUpdate x y z) updatesLst
updates = take (length trainSet) $ constructUpdate' (length nn)

nn' = trainNeurons' (trainSet !! 1) (updates !! 1) nn
nn'' = trainNeurons' (trainSet !! 2) (updates !! 2) nn'

trainCAMNN' nn updates trainSet
trainUntilLearned' nn trainSet 0 3

--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---

nSize = 4
testSize = 5
nnSize = 3

camW0 = fromListUnboxed (ix2 nSize nSize) $ replicate (nSize * nSize) False
camT0 = fromListUnboxed (ix1 nSize) $ replicate nSize nSize :: NTTVU
camN0 = CAMNeuron (CAMWElem (-1) camW0 ) (CAMTElem (-1) camT0)

baseLst = [1 .. testSize]
baseOLst = P.map sin [1 .. testSize]
inputsLst = P.map (num2Bin' nSize) baseLst
outputLst = P.map (num2Bin' nSize . round . (* 100)) baseOLst
inputs = P.map (fromListUnboxed (ix1 nSize)) inputsLst
outputs = P.map (fromListUnboxed (ix1 nSize)) outputLst

trainSet = P.zipWith (\x y -> TrainElem x y) inputs outputs

nn = replicate nnSize camN0
updates = take (length trainSet) $ constructUpdate (length nn)

trainNeurons (trainSet !! 0) (updates !! 0) nn

trainUntilLearned nn trainSet 0 0

train = trainInput $ trainSet !! 0
desired = trainOutput $ trainSet !! 0
lIndex = lstIndex $ updates !! 0
cElem = camElem $ updates !! 0

query = foldl applyNeuron train nn
compared = vecCompare query desired
chosenNeuron = nn !! lIndex
choppedNNR = take (lIndex + 1) $ reverse nn
choppedNN = take (lIndex + 1) nn
hidden = foldl applyNeuron train choppedNN
output = applyNeuron hidden chosenNeuron
deltaP = foldl applyReverseNeuron' compared choppedNNR
camNN = updateCAMNeuron' chosenNeuron cElem deltaP output hidden
nn' = replaceElem nn lIndex camNN

--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---
--***--__---___---___----***--__---___---___---

let (row, col) = (3,3)
camW0 = CAMWElem 0 $ createWeight row col [1,1,1,0,1,1,1,1,0]
camT0 = CAMTElem 2 $ createThreshold row col [2,3,2]
camN0 = CAMNeuron camW0 camT0

camW1 = CAMWElem 2 $ createWeight row col [1,0,1,0,0,0,0,1,1]
camT1 = CAMTElem 2 $ createThreshold row col [2,2,1]
camN1 = CAMNeuron camW1 camT1

camW2 = CAMWElem 0 $ createWeight row col [0,0,1,1,0,1,0,1,1]
camT2 = CAMTElem 2 $ createThreshold row col [1,1,2]
camN2 = CAMNeuron camW2 camT2
nn = [camN0, camN1, camN2]
updates' = updatesWithConditions (length nn) (length trainSet) 4

-- trainCAMNN nn updates' trainSet
pos = 0
nn1 = trainNeurons (trainSet !! pos) (updates' !! pos) nn
pos = 1
nn2 = trainNeurons (trainSet !! pos) (updates' !! pos) nn1
pos = 2
nn3 = trainNeurons (trainSet !! pos) (updates' !! pos) nn2
pos = 3
nn4 = trainNeurons (trainSet !! pos) (updates' !! pos) nn3
pos = 4
nn5 = trainNeurons (trainSet !! pos) (updates' !! pos) nn4
pos = 5
nn6 = trainNeurons (trainSet !! pos) (updates' !! pos) nn5
pos = 6
nn7 = trainNeurons (trainSet !! pos) (updates' !! pos) nn6
pos = 7
nn8 = trainNeurons (trainSet !! pos) (updates' !! pos) nn7
(TrainElem train desired) = (trainSet !! pos)
(CAMUpdate lIndex cElem) = (updates' !! pos)

(query, wAo) = queryNeuronsAcc nn7 train
compared = vecCompare query desired
chosenNeuron = nn7 !! lIndex
wAoI = wAo !! lIndex
deltaPos = take (length nn7 - lIndex) $ reverse wAo
deltaP = calculateDelta deltaPos compared
camNN = updateCAMNeuron chosenNeuron cElem deltaP wAoI
nn' = replaceElem nn7 lIndex camNN

