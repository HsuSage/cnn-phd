
@article{Elliott:2018aa,
	Abstract = {Automatic differentiation (AD) in reverse mode (RAD) is a central component of deep learning and other uses of large-scale optimization. Commonly used RAD algorithms such as backpropagation, however, are complex and stateful, hindering deep understanding, improvement, and parallel execution. This paper develops a simple, generalized AD algorithm calculated from a simple, natural specification. The general algorithm can be specialized by varying the representation of derivatives. In particular, applying well-known constructions to a naive representation yields two RAD algorithms that are far simpler than previously known. In contrast to commonly used RAD implementations, the algorithms defined here involve no graphs, tapes, variables, partial derivatives, or mutation. They are inherently parallel-friendly, correct by construction, and usable directly from an existing programming language with no need for new data types or programming style, thanks to use of an AD-agnostic compiler plugin.
},
	Author = {Conal Elliott},
	Date-Added = {2018-04-06 11:42:18 +0000},
	Date-Modified = {2018-04-06 11:43:03 +0000},
	Eprint = {1804.00746},
	Keywords = {Automatic Differentiation, Math, Haskell, Category Theory},
	Month = {04},
	Title = {The simple essence of automatic differentiation (Differentiable functional programming made easy)
},
	Url = {https://arxiv.org/pdf/1804.00746},
	Year = {2018},
	Bdsk-Url-1 = {https://arxiv.org/abs/1804.00746},
	Bdsk-Url-2 = {https://arxiv.org/pdf/1804.00746}}
